// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model Marca {
  id             Int         @id @default(autoincrement())
  nome           String      @db.VarChar(30)
  carros         Carro[]
  @@map("marcas")
}

model Carro {
  id             Int          @id @default(autoincrement())
  modelo         String       @db.VarChar(30)
  ano            Int          @db.SmallInt
  preco          Decimal      @db.Decimal(10, 2)
  km             Int
  foto           String
  acessorios     String?
  combustivel    Combustiveis @default(FLEX)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt()
  destaque       Boolean      @default(true)
  marca          Marca        @relation(fields: [marcaId], references: [id])
  marcaId        Int
  admin          Admin        @relation(fields: [adminId], references: [id])
  adminId        String       @db.VarChar(36)
  fotos          Foto[]
  propostas      Proposta[]
  @@map("carros")
}

enum Combustiveis {
  FLEX
  GASOLINA
  ETANOL
  DIESEL
  ELETRICO
  HIBRIDO
}

model Foto {
  id             Int          @id @default(autoincrement())
  descricao      String       @db.VarChar(40)
  url            String
  carro          Carro        @relation(fields: [carroId], references: [id])
  carroId        Int
  @@map("fotos")
}

model Cliente {
  id            String   @db.VarChar(36) @id @default(uuid())
  nome          String   @db.VarChar(60)
  email         String   @db.VarChar(40)
  senha         String   @db.VarChar(60)   // senha deve ser varchar(60)
  cidade        String   @db.VarChar(40)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt  
  propostas     Proposta[]
  @@map("clientes")
}

model Proposta {
  id          Int       @id @default(autoincrement())
  cliente     Cliente   @relation(fields: [clienteId], references: [id])
  clienteId   String    @db.VarChar(36)
  carro       Carro     @relation(fields: [carroId], references: [id])
  carroId     Int
  descricao   String    @db.VarChar(255)
  resposta    String?   @db.VarChar(255)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt  
  admin       Admin?    @relation(fields: [adminId], references: [id])
  adminId     String?    @db.VarChar(36)
  @@map("propostas")
}

model Admin {
  id            String   @db.VarChar(36) @id @default(uuid())
  nome          String   @db.VarChar(60)
  email         String   @db.VarChar(40)
  senha         String   @db.VarChar(60)   // senha deve ser varchar(60)
  nivel         Int      @db.SmallInt @default(2)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt  
  carros        Carro[]
  propostas     Proposta[]
  @@map("admins")
}
